module Exploits exposing (main)

import Browser
import Html exposing (..)
import Html.Attributes exposing (..)

disassembled = [
     "0000555555555000 endbr64     # check_password"
    ,"0000555555555004 push   %r12"
    ,"0000555555555006 push   %rbp"
    ,"0000555555555007 push   %rbx"
    ,"0000555555555008 sub    $0x10,%rsp"
    ,"000055555555500c mov    $0x1,%ebx"
    ,"0000555555555011 lea    0x2fe8(%rip),%r12        # 0x555555558000 <prompt2>"
    ,"0000555555555018 jmp    0x555555555047 <check_password+71>"
    ,"000055555555501a mov    %rsp,%rbp"
    ,"000055555555501d mov    %rbp,%rdx"
    ,"0000555555555020 mov    $0x1c,%esi"
    ,"0000555555555025 lea    0x2ff4(%rip),%rdi        # 0x555555558020 <prompt1>"
    ,"000055555555502c callq  0x555555555177 <prompt>"
    ,"0000555555555031 mov    0x3008(%rip),%rsi        # 0x555555558040 <pw>"
    ,"0000555555555038 mov    %rbp,%rdi"
    ,"000055555555503b callq  0x5555555551e4 <strcmp>"
    ,"0000555555555040 test   %eax,%eax"
    ,"0000555555555042 je     0x555555555091 <check_password+145>"
    ,"0000555555555044 add    $0x1,%ebx"
    ,"0000555555555047 cmp    $0x1,%ebx"
    ,"000055555555504a je     0x55555555501a <check_password+26>"
    ,"000055555555504c mov    $0x34,%eax"
    ,"0000555555555051 sub    %ebx,%eax"
    ,"0000555555555053 mov    %al,0x12(%r12)"
    ,"0000555555555058 mov    %rsp,%rbp"
    ,"000055555555505b mov    %rbp,%rdx"
    ,"000055555555505e mov    $0x20,%esi"
    ,"0000555555555063 mov    %r12,%rdi"
    ,"0000555555555066 callq  0x555555555177 <prompt>"
    ,"000055555555506b mov    0x2fce(%rip),%rsi        # 0x555555558040 <pw>"
    ,"0000555555555072 mov    %rbp,%rdi"
    ,"0000555555555075 callq  0x5555555551e4 <strcmp>"
    ,"000055555555507a test   %eax,%eax"
    ,"000055555555507c je     0x555555555098 <check_password+152>"
    ,"000055555555507e cmp    $0x2,%ebx"
    ,"0000555555555081 jle    0x555555555044 <check_password+68>"
    ,"0000555555555083 mov    $0x0,%eax"
    ,"0000555555555088 add    $0x10,%rsp"
    ,"000055555555508c pop    %rbx"
    ,"000055555555508d pop    %rbp"
    ,"000055555555508e pop    %r12"
    ,"0000555555555090 retq   "
    ,"0000555555555091 mov    $0x1,%eax"
    ,"0000555555555096 jmp    0x555555555088 <check_password+136>"
    ,"0000555555555098 mov    $0x1,%eax"
    ,"000055555555509d jmp    0x555555555088 <check_password+136>"
    ,"000055555555509f endbr64     # open_lock"
    ,"00005555555550a3 sub    $0x8,%rsp"
    ,"00005555555550a7 mov    $0x1,%edx"
    ,"00005555555550ac lea    0xf4d(%rip),%rsi        # 0x555555556000"
    ,"00005555555550b3 mov    $0x1,%edi"
    ,"00005555555550b8 callq  0x55555555521c <write>"
    ,"00005555555550bd add    $0x8,%rsp"
    ,"00005555555550c1 retq   "
    ,"00005555555550c2 endbr64     # main"
    ,"00005555555550c6 sub    $0x8,%rsp"
    ,"00005555555550ca mov    $0x0,%eax"
    ,"00005555555550cf callq  0x555555555000 <check_password>"
    ,"00005555555550d4 test   %eax,%eax"
    ,"00005555555550d6 je     0x5555555550ec <main+42>"
    ,"00005555555550d8 mov    $0x0,%eax"
    ,"00005555555550dd callq  0x55555555509f <open_lock>"
    ,"00005555555550e2 mov    $0x0,%eax"
    ,"00005555555550e7 add    $0x8,%rsp"
    ,"00005555555550eb retq   "
    ,"00005555555550ec mov    $0x1,%edx"
    ,"00005555555550f1 lea    0xf0a(%rip),%rsi        # 0x555555556002"
    ,"00005555555550f8 mov    $0x1,%edi"
    ,"00005555555550fd callq  0x55555555521c <write>"
    ,"0000555555555102 jmp    0x5555555550e2 <main+32>"
    ,"0000555555555104 endbr64     # _start"
    ,"0000555555555108 push   %rax"
    ,"0000555555555109 pop    %rax"
    ,"000055555555510a sub    $0x8,%rsp"
    ,"000055555555510e mov    $0x0,%eax    # _start"
    ,"0000555555555113 callq  0x5555555550c2 <main>"
    ,"0000555555555118 mov    %eax,%edi"
    ,"000055555555511a callq  0x555555555234 <exit>"
    ,"000055555555511f endbr64     # gets"
    ,"0000555555555123 push   %r12"
    ,"0000555555555125 push   %rbp"
    ,"0000555555555126 push   %rbx"
    ,"0000555555555127 sub    $0x10,%rsp"
    ,"000055555555512b mov    %rdi,%r12"
    ,"000055555555512e mov    %rdi,%rbx"
    ,"0000555555555131 lea    0xf(%rsp),%rbp"
    ,"0000555555555136 mov    $0x1,%edx"
    ,"000055555555513b mov    %rbp,%rsi"
    ,"000055555555513e mov    $0x0,%edi"
    ,"0000555555555143 callq  0x555555555228 <read>"
    ,"0000555555555148 test   %eax,%eax"
    ,"000055555555514a je     0x55555555515e <gets+63>"
    ,"000055555555514c movzbl 0xf(%rsp),%eax"
    ,"0000555555555151 cmp    $0xa,%al"
    ,"0000555555555153 je     0x555555555168 <gets+73>"
    ,"0000555555555155 add    $0x1,%rbx"
    ,"0000555555555159 mov    %al,-0x1(%rbx)"
    ,"000055555555515c jmp    0x555555555136 <gets+23>"
    ,"000055555555515e mov    $0x0,%edi"
    ,"0000555555555163 callq  0x555555555234 <exit>"
    ,"0000555555555168 movb   $0x0,(%rbx)"
    ,"000055555555516b mov    %r12,%rax"
    ,"000055555555516e add    $0x10,%rsp"
    ,"0000555555555172 pop    %rbx"
    ,"0000555555555173 pop    %rbp"
    ,"0000555555555174 pop    %r12"
    ,"0000555555555176 retq   "
    ,"0000555555555177 endbr64     # prompt"
    ,"000055555555517b push   %r13"
    ,"000055555555517d push   %r12"
    ,"000055555555517f push   %rbp"
    ,"0000555555555180 push   %rbx"
    ,"0000555555555181 sub    $0x18,%rsp"
    ,"0000555555555185 mov    %rdi,%rbp"
    ,"0000555555555188 mov    %esi,%r12d"
    ,"000055555555518b mov    %rdx,%rbx"
    ,"000055555555518e movb   $0x3f,0xf(%rsp)"
    ,"0000555555555193 lea    0xf(%rsp),%r13"
    ,"0000555555555198 mov    $0x1,%edx"
    ,"000055555555519d mov    %r13,%rsi"
    ,"00005555555551a0 mov    $0x2,%edi"
    ,"00005555555551a5 callq  0x55555555521c <write>"
    ,"00005555555551aa mov    %r12d,%edx"
    ,"00005555555551ad mov    %rbp,%rsi"
    ,"00005555555551b0 mov    $0x2,%edi"
    ,"00005555555551b5 callq  0x55555555521c <write>"
    ,"00005555555551ba movb   $0x0,0xf(%rsp)"
    ,"00005555555551bf mov    $0x1,%edx"
    ,"00005555555551c4 mov    %r13,%rsi"
    ,"00005555555551c7 mov    $0x2,%edi"
    ,"00005555555551cc callq  0x55555555521c <write>"
    ,"00005555555551d1 mov    %rbx,%rdi"
    ,"00005555555551d4 callq  0x55555555511f <gets>"
    ,"00005555555551d9 add    $0x18,%rsp"
    ,"00005555555551dd pop    %rbx"
    ,"00005555555551de pop    %rbp"
    ,"00005555555551df pop    %r12"
    ,"00005555555551e1 pop    %r13"
    ,"00005555555551e3 retq   "
    ,"00005555555551e4 endbr64     # strcmp"
    ,"00005555555551e8 movzbl (%rdi),%eax"
    ,"00005555555551eb test   %al,%al"
    ,"00005555555551ed je     0x555555555210 <strcmp+44>"
    ,"00005555555551ef movzbl (%rsi),%edx"
    ,"00005555555551f2 test   %dl,%dl"
    ,"00005555555551f4 je     0x55555555520a <strcmp+38>"
    ,"00005555555551f6 add    $0x1,%rdi"
    ,"00005555555551fa add    $0x1,%rsi"
    ,"00005555555551fe movsbl %al,%eax"
    ,"0000555555555201 movsbl %dl,%edx"
    ,"0000555555555204 sub    %edx,%eax"
    ,"0000555555555206 je     0x5555555551e8 <strcmp+4>"
    ,"0000555555555208 jmp    0x55555555521b <strcmp+55>"
    ,"000055555555520a mov    $0x1,%eax"
    ,"000055555555520f retq   "
    ,"0000555555555210 cmpb   $0x0,(%rsi)"
    ,"0000555555555213 setne  %al"
    ,"0000555555555216 movzbl %al,%eax"
    ,"0000555555555219 neg    %eax"
    ,"000055555555521b retq   "
    ,"000055555555521c endbr64     # write"
    ,"0000555555555220 mov    $0x1,%eax"
    ,"0000555555555225 syscall "
    ,"0000555555555227 retq   "
    ,"0000555555555228 endbr64     # read"
    ,"000055555555522c mov    $0x0,%eax"
    ,"0000555555555231 syscall "
    ,"0000555555555233 retq   "
    ,"0000555555555234 endbr64     # exit"
    ,"0000555555555238 mov    $0x3c,%eax"
    ,"000055555555523d syscall "
    ]

initialModel = {
        disassembly = disassembled
    }

viewDisassembled line =
    pre [class "code"] [text line]
    
view model =
    div [] [ div [id "disasm", class "disasmgrid"] 
                (List.map viewDisassembled model.disassembly)
           , div [id "memory", class "memgrid"] []
           , div [id "registers", class "reggrid"] [] ]

update msg model = model

main = Browser.sandbox
    { init = initialModel
    , view = view
    , update = update
    }
